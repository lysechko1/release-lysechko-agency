import { NextRequest, NextResponse } from "next/server"
import { URLSearchParams } from "url"

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const requiredFields = [
      'contactName',
      'contactPhone', 
      'contactEmail'
    ]
    
    for (const field of requiredFields) {
      if (!body[field] || body[field].trim() === '') {
        return NextResponse.json(
          { error: `–ü–æ–ª–µ ${field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è` },
          { status: 400 }
        )
      }
    }

    // Telegram Bot API integration
    const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN
    const telegramChatId = process.env.TELEGRAM_CHAT_ID || "-4957376488" // Use provided ID as default

    console.log("Loaded TELEGRAM_BOT_TOKEN:", telegramBotToken?.slice(0, 10) + "...")
    console.log("Loaded TELEGRAM_CHAT_ID:", telegramChatId)

    if (!telegramBotToken || !telegramChatId) {
      console.warn("Telegram bot token or chat ID not configured. Cannot send grooming salon brief notification.")
      return NextResponse.json({ message: "Telegram notification not configured." }, { status: 500 })
    }

    // Construct the Telegram message
    const telegramMessage = `
*üìã –ù–û–í–´–ô –ë–†–ò–§ –ì–†–£–ú–ò–ù–ì-–°–ê–õ–û–ù–ê!*

üë§ *–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*
‚Ä¢ –ò–º—è: ${body.contactName}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${body.contactPhone}
‚Ä¢ Email: ${body.contactEmail}

üè™ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–ª–æ–Ω–µ:*
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: ${body.salonName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –ê–¥—Ä–µ—Å: ${body.salonAddress || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –°–∞–π—Ç/—Å–æ—Ü—Å–µ—Ç–∏: ${body.salonWebsite || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üéØ *–ß—Ç–æ –Ω—É–∂–Ω–æ –æ—Ç –Ω–∞—Å:*
${body.services && body.services.length > 0 ? body.services.map(service => `‚Ä¢ ${service}`).join('\n') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
${body.otherService ? `‚Ä¢ –î—Ä—É–≥–æ–µ: ${body.otherService}` : ''}

üë• *–ö–ª–∏–µ–Ω—Ç—ã:*
${body.clientsDescription || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

‚ùå *–ü—Ä–æ–±–ª–µ–º—ã –∫–ª–∏–µ–Ω—Ç–æ–≤:*
${body.clientProblems || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

ü§î *–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤:*
${body.clientObjections || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üìç *–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤:*
${body.clientGeography || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
${body.otherGeography ? `‚Ä¢ –î—Ä—É–≥–æ–µ: ${body.otherGeography}` : ''}

üèÜ *–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã:*
${body.competitors || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

‚è∞ *–°—Ä–æ–∫–∏ –Ω–∞—á–∞–ª–∞:*
${body.startDate || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üí∞ *–ë—é–¥–∂–µ—Ç:*
${body.budget || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üåç *–Ø–∑—ã–∫ —Ä–µ–∫–ª–∞–º—ã:*
${body.advertisingLanguage || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
${body.otherLanguage ? `‚Ä¢ –î—Ä—É–≥–æ–µ: ${body.otherLanguage}` : ''}

üìù *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:*
${body.additionalInfo || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üïê *–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:* ${new Date().toLocaleString('ru-RU')}
    `.trim()

    const telegramApiUrl = `https://api.telegram.org/bot${telegramBotToken}/sendMessage`
    const params = new URLSearchParams({
      chat_id: telegramChatId,
      text: telegramMessage,
      parse_mode: "Markdown",
    })

    try {
      const telegramResponse = await fetch(telegramApiUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
        },
        body: params.toString(),
      })

      if (telegramResponse.ok) {
        console.log("Grooming salon brief Telegram message sent successfully!")
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('Grooming Salon Brief Form Submission:', {
          timestamp: new Date().toISOString(),
          ...body
        })

        return NextResponse.json(
          { message: "–ë—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" },
          { status: 200 }
        )
      } else {
        const errorData = await telegramResponse.json()
        console.error("Failed to send grooming salon brief Telegram message:", errorData)
        return NextResponse.json(
          { message: "Failed to send Telegram notification for grooming salon brief." },
          { status: 500 }
        )
      }
    } catch (telegramError) {
      console.error("Error sending grooming salon brief Telegram message:", telegramError)
      return NextResponse.json(
        { message: "Failed to send Telegram notification for grooming salon brief due to network error." },
        { status: 500 }
      )
    }
    
  } catch (error) {
    console.error('Error processing grooming salon brief form:', error)
    return NextResponse.json(
      { error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" },
      { status: 500 }
    )
  }
}
